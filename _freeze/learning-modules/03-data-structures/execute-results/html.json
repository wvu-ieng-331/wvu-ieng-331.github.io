{
  "hash": "755b99e9f0e9842627e850b29ed59666",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"03 | Data Structures\"\nsubtitle: \"Python Data Structures [NEED A BETTER SUBTITLE]\"\nformat: html\norder: 3\n---\n\n\n\n\n## Overview\n\n[WRITE AN OVERVIEW OF MODULE]\n\nThis chapter presents one of Python’s most useful built-in types, lists. You will also learn more about objects and what can happen when multiple variables refer to the same object.\n\nIn the exercises at the end of the chapter, we’ll make a word list and use it to search for special words like palindromes and anagrams.\n\n## Lists, a sequence of elements\n\nA **list** is a sequence of values that can be of any type. The values in the list are called **elements**.\n\nThere are several ways to create a new list; the simples is to enclose the elements in square brackets, `[` & `]`.\n\n::: {#f07860fb .cell execution_count=1}\n``` {.python .cell-code}\n# A list of two integers\nnumbers = [42, 123]\n\n# A list of three strings\ncheeses = [\"Cheddar\", \"Edam\", \"Gouda\"]\n```\n:::\n\n\nThe elements of a list don’t have to be the same type. The following list contains a string, a float, an integer, and even another list.\n\n::: {#5d88f87f .cell execution_count=2}\n``` {.python .cell-code}\nt = ['spam', 2.0, 5, [10, 20]]\n```\n:::\n\n\nA list within another list is **nested**.\n\nA list that contains no elements is called an empty list; you can create one with empty brackets, `[]`.\n\n::: {#ace3405d .cell execution_count=3}\n``` {.python .cell-code}\nempty = []\n```\n:::\n\n\nThe `len` function will return the length of a list:\n\n::: {#3a8bbc63 .cell execution_count=4}\n``` {.python .cell-code}\nlen(cheeses)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n3\n```\n:::\n:::\n\n\nThe length of an empty list is `0`.\n\n## Lists are mutable\n\nTo read an element of a list, we can use the bracket operator. The index of the first element is `0`.\n\n::: {.callout-tip}\nPython, like many other programming languages, start counting from `0` instead of `1`. The reason *why* is a mix of historical and computational reasons that are far beyond the scope of this class.\n:::\n\n::: {#3933e111 .cell execution_count=5}\n``` {.python .cell-code}\ncheeses[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n'Cheddar'\n```\n:::\n:::\n\n\nUnlike strings, lists are **mutable**, which means their contents can be changed. When the bracket operator appears on the left side of an assignment, it identifies the element of the list that will be assigned.\n\n::: {#7720f1af .cell execution_count=6}\n``` {.python .cell-code}\nprint(numbers)\nnumbers[1] = 17\nnumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[42, 123]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n[42, 17]\n```\n:::\n:::\n\n\nHere's how list indices work:\n\n- Any integer expression can be used as an index.\n- If you try to read or write an element that does not exist, you get an `IndexError`.\n- If an index has a negative value, it counts backward from the end of the list.\n\nYou can use the `in` operator to see if a given element appears anywhere in the list:\n\n::: {#a33c227f .cell execution_count=7}\n``` {.python .cell-code}\nf\"Edam\" in cheeses\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#a6b554d7 .cell execution_count=8}\n``` {.python .cell-code}\nf\"Wensleydale\" in cheeses\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nFalse\n```\n:::\n:::\n\n\nAlthough a list can contain another list, the nested list still counts as a single element – so in the following list, there are only four elements.\n\n::: {#ed6cf8cd .cell execution_count=9}\n``` {.python .cell-code}\nt = ['spam', 2.0, 5, [10, 20]]\nlen(t)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n4\n```\n:::\n:::\n\n\nAnd `10` is not considered to be an element of `t` because it is an element of a nested list, not `t`.\n\n::: {#5fffa62a .cell execution_count=10}\n``` {.python .cell-code}\n10 in t\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nFalse\n```\n:::\n:::\n\n\n",
    "supporting": [
      "03-data-structures_files"
    ],
    "filters": [],
    "includes": {}
  }
}