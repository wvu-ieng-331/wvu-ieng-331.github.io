{
  "hash": "3e1472f9535e86d8b8c14bed5b50435c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"02 | Intro to Python\"\nsubtitle: \"Learn about the basics of Python.\"\nformat: html\norder: 2\n---\n\n\n\n\n## Overview\n\nThis module covers the Python basics you need for this course. It isn’t an exhaustive guide to Python, but it’s enough for anyone with previous coding experience (see [Prerequisite Course(s)](../index.qmd#course-info)).\n\nYou will learn how Python represents numbers, letters, and words, followed by arithmetic operations. We’ll also build important programming vocabulary. I won’t test you on these terms, but you’ll need them for future lessons.\n\nNext, we’ll learn about variables, statements, the `import` statement, and the `print()` function. We’ll also discuss function arguments and Python modules.\n\n## Arithmetic operators\n\nAn **arithmetic operator** is a symbol that represents a computation. For example:\n\n- `+` performs addition:\n\n::: {#a2a7f69a .cell execution_count=1}\n``` {.python .cell-code}\n2000 + 25\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2025\n```\n:::\n:::\n\n\n- `-` performs subtraction:\n\n::: {#a67d34a7 .cell execution_count=2}\n``` {.python .cell-code}\n2030 - 5\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n2025\n```\n:::\n:::\n\n\n- `*` performs multiplication:\n\n::: {#d4a9486a .cell execution_count=3}\n``` {.python .cell-code}\n405 * 25\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n10125\n```\n:::\n:::\n\n\n- `/` performs division:\n\n::: {#0e2c7ed9 .cell execution_count=4}\n``` {.python .cell-code}\n10125 / 5\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2025.0\n```\n:::\n:::\n\n\nNotice that the result of division is `42.0` vs `42`. Python recognizes two numeric types:\n\n1. **integers**: numbers without a decimal part\n2. **floating-point numbers (float)**: numbers with a decimal point (including integer-like values stored in floating form)\n\nIf you add, subtract, or multiply two integers, the result remains an integer. However, dividing two integers produces a floating-point result. \n\nPython also supports **integer division** with the operator `//`, which always return an integer:\n\n::: {#f7925afc .cell execution_count=5}\n``` {.python .cell-code}\n4050 // 2\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2025\n```\n:::\n:::\n\n\nThis operator is called \"floor division\" because it always rounds down:\n\n::: {#2de8ced8 .cell execution_count=6}\n``` {.python .cell-code}\n4051 // 2\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2025\n```\n:::\n:::\n\n\nThe **modulus** operator `%` returns the remainder after dividing two numbers:\n\n::: {#405dc4e3 .cell execution_count=7}\n``` {.python .cell-code}\n4051 % 2 # remainder is 1\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n1\n```\n:::\n:::\n\n\nIf a number divides evenly, `%` returns `0`:\n\n::: {#0b1095e5 .cell execution_count=8}\n``` {.python .cell-code}\n4050 % 2 # remainder is 0\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0\n```\n:::\n:::\n\n\nFinally, `**` performs exponentiation (raising a number to a power):\n\n::: {#ac35af6c .cell execution_count=9}\n``` {.python .cell-code}\n4.58442641 ** 5\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n2025.0000056375889\n```\n:::\n:::\n\n\n::: {.callout-tip}\nIn other languages, like **R**, you use the caret `^` for exponentiation, but in Python `^` is the \"XOR\" operator, which we won’t cover here.\n:::\n\n## Expressions\n\nAn **expression** is a combination of operators and values:\n\n::: {#7d25cdd7 .cell execution_count=10}\n``` {.python .cell-code}\n6 + 6 ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n42\n```\n:::\n:::\n\n\nPython follows standard order of operations:\n\n::: {#03483c84 .cell execution_count=11}\n``` {.python .cell-code}\n12 + 5 *6\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n42\n```\n:::\n:::\n\n\nUse parentheses to change that order:\n\n::: {#b32aad07 .cell execution_count=12}\n``` {.python .cell-code}\n(12 + 5) * 6\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n102\n```\n:::\n:::\n\n\nEvery expression evaluates to a **value**, so `6 * 7` becomes `42`.\n\n## Arithmetic functions\n\nPython provides **functions** that work with numbers, such as:\n\n- `round()` rounds a float to the nearest integer:\n\n::: {#f58f88f7 .cell execution_count=13}\n``` {.python .cell-code}\nround(4.58442641 ** 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n2025\n```\n:::\n:::\n\n\n- `abs()` returns the absolute value\n\n::: {#b119e17d .cell execution_count=14}\n``` {.python .cell-code}\nabs(-2025)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n2025\n```\n:::\n:::\n\n\nWhen you **call** a function, you must use parentheses. Omitting them causes a syntax error:\n\n::: {#4eafaaf8 .cell execution_count=15}\n``` {.python .cell-code}\nabs 42 # correct usage: abs(42)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[15], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    abs 42 # correct usage: abs(42)</span>\n<span class=\"ansi-white-fg ansi-bold\">        ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\nIf you type only the function name:\n\n::: {#ab60e71e .cell execution_count=16}\n``` {.python .cell-code}\nabs\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<function abs(x, /)>\n```\n:::\n:::\n\n\nPython tells you that `abs` is indeed a function, along with some extra details.\n\n## Strings\n\nA **string** is a sequence of characters. You can enclose them in single or double quotes:\n\n::: {#b96f8a24 .cell execution_count=17}\n``` {.python .cell-code}\nprint('Hello')\nprint(\"World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\nWorld\n```\n:::\n:::\n\n\nUse double quotes if you need an apostrophe, or single quotes if you need a double quote:\n\n::: {#7b4c7c16 .cell execution_count=18}\n``` {.python .cell-code}\nprint(\"That's her book\")\nprint('\"I see,\" he said')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThat's her book\n\"I see,\" he said\n```\n:::\n:::\n\n\n::: {.callout-tip}\nPython treats single and double quotes the same; you can choose either as long as you’re consistent.\n:::\n\n**Triple-quoted strings** can span multiple lines or contain both single and double quotes:\n\n::: {#5446d150 .cell execution_count=19}\n``` {.python .cell-code}\nprint('''\"That's great\", she said.''')\n\nprint(\"\"\"\nTo be,\nor not to be,\nthat is definitely a question.\n\"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"That's great\", she said.\n\nTo be,\nor not to be,\nthat is definitely a question.\n\n```\n:::\n:::\n\n\nStrings can hold spaces, punctuation, and digits:\n\n::: {#a2eeefc8 .cell execution_count=20}\n``` {.python .cell-code}\nprint(\"How the turn tables... uhh wait. What was line 5?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHow the turn tables... uhh wait. What was line 5?\n```\n:::\n:::\n\n\nUse the `+` operator to **concatenate** (join) strings:\n\n::: {#ed0249c7 .cell execution_count=21}\n``` {.python .cell-code}\nprint('Well, ' + \"it's a small \" + 'world.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWell, it's a small world.\n```\n:::\n:::\n\n\nUse the `*` operator to repeat strings:\n\n::: {#ffad2f09 .cell execution_count=22}\n``` {.python .cell-code}\nprint('RA' + 'TA' * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRATATATA\n```\n:::\n:::\n\n\nOther arithmetic operators don't work on strings.\n\nYou can use `len()` to find a string’s length:\n\n::: {#e22ccaf6 .cell execution_count=23}\n``` {.python .cell-code}\nlen('12345')\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n5\n```\n:::\n:::\n\n\n::: {.callout-note}\nNotice that `len()` counts the the letters between the quotes, but not the quotes themselves.\n:::\n\nAvoid backticks `` ` `` or curly quotes `“ ”` because they cause syntax errors:\n\n::: {#fe482545 .cell execution_count=24}\n``` {.python .cell-code}\nprint(`hello`)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[24], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    print(`hello`)</span>\n<span class=\"ansi-white-fg ansi-bold\">          ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#28f399a0 .cell execution_count=25}\n``` {.python .cell-code}\nprint(“hello”)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[25], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    print(“hello”)</span>\n<span class=\"ansi-white-fg ansi-bold\">          ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid character '“' (U+201C)\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.callout-tip}\nMost code editors color valid strings differently, so keep an eye on syntax highlighting to avoid mistakes.\n:::\n\n## Values and types\n\nWe’ve encountered three kinds of values:\n\n1. `2` (integer)\n2. `42.0` (float)\n3. `\"text\"` (string)\n\nA kind of value is called a **type**. Every value has a type, also referred to as \"belongs to\" a type.\n\nPython provides a function, `type()`, that tells you the type of any value:\n\n::: {#753edc77 .cell execution_count=26}\n``` {.python .cell-code}\ntype(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nint\n```\n:::\n:::\n\n\n::: {#29ba8c3e .cell execution_count=27}\n``` {.python .cell-code}\ntype(42.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#acbb64e4 .cell execution_count=28}\n``` {.python .cell-code}\ntype(\"text\")\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nstr\n```\n:::\n:::\n\n\n`int`, `float`, and `str` can also convert values:\n\n::: {#8277725f .cell execution_count=29}\n``` {.python .cell-code}\nint(42.9) # rounds down to 42\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n42\n```\n:::\n:::\n\n\n::: {#743ebb69 .cell execution_count=30}\n``` {.python .cell-code}\nfloat(42) # converts integer 42 to float 42.0\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n42.0\n```\n:::\n:::\n\n\n::: {#c2c46324 .cell execution_count=31}\n``` {.python .cell-code}\nstr(123) # converts number 123 to the string \"123\"\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n'123'\n```\n:::\n:::\n\n\nIf you try arithmetic on a string, you get an error:\n\n::: {#dcb099ef .cell execution_count=32}\n``` {.python .cell-code}\nprint(123 * 3)   # numeric multiplication\nprint(\"123\" * 3) # string repetition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n369\n123123123\n```\n:::\n:::\n\n\n::: {#7568022e .cell execution_count=33}\n``` {.python .cell-code}\nprint(\"500\" / 5) # TypeError: can't divide a string by an integer\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[33], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">500</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">/</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">5</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># TypeError: can't divide a string by an integer</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: unsupported operand type(s) for /: 'str' and 'int'</pre>\n```\n:::\n\n:::\n:::\n\n\nTo fix this, **cast** to the right type:\n\n::: {#ee7afe32 .cell execution_count=34}\n``` {.python .cell-code}\nint(\"126\") * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n378\n```\n:::\n:::\n\n\nIf you have a large integer, you may type it like `1,000,000`. This is a legal expression in Python, but the value is not what you would expect:\n\n::: {#517a2600 .cell execution_count=35}\n``` {.python .cell-code}\n1,000,000\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n(1, 0, 0)\n```\n:::\n:::\n\n\nPython interprets `1,000,000` as a comma-separated sequence of integers. We'll learn about this kind of sequence later.\n\nYou can use underscores to make large numbers easier to read:\n\n::: {#c9ee0ee3 .cell execution_count=36}\n``` {.python .cell-code}\n1_000_000\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n1000000\n```\n:::\n:::\n\n\n## Formal and natural languages\n\nNatural languages (English, Spanish, etc.) evolved over time and rely on context, idioms, and sometimes ambiguity. Formal languages like Python are precise and unambiguous. Python does exactly what you write, so details matter. Small mistakes in spelling or punctuation can cause big errors. You might find this rigid at first, but you’ll adapt with practice.\n\n## Variables\n\nA **variable** is a name that refers to a value. Create one with an **assignment statement**:\n\n::: {#6c24e668 .cell execution_count=37}\n``` {.python .cell-code}\nn = 17\n```\n:::\n\n\nThe assignment has three parts:\n\n1. The variable name\n2. The `=` operator\n3. An expression (`17` here)\n\n::: {#be0307d0 .cell execution_count=38}\n``` {.python .cell-code}\npi = 3.141592653589793\nmessage = \"pie > π\"\n```\n:::\n\n\nOnce assigned, you can use these variables:\n\n::: {#6d7de208 .cell execution_count=39}\n``` {.python .cell-code}\nprint(message)\nprint(n + 5)\nprint(2 * pi)\nprint(round(pi))\nprint(len(message))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npie > π\n22\n6.283185307179586\n3\n7\n```\n:::\n:::\n\n\n## Variable names\n\nYou can use letters and digits in a variable name but cannot start with a digit. Although uppercase letters are allowed, most Python code uses lowercase. Use underscores to connect words: `your_name` or `airspeed_of_unladen_swallow`.\n\nA name containing punctuation (`million!`) or starting with a number (`76trombones`) triggers a syntax error. Some words, like `class`, are keywords and cannot be variable names.\n\n::: {#5d83937f .cell execution_count=40}\n``` {.python .cell-code}\nmillion! = 1000000\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[40], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    million! = 1000000</span>\n<span class=\"ansi-white-fg ansi-bold\">           ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n`76trombones` is illegal because it starts with a number.\n\n::: {#a6ef419e .cell execution_count=41}\n``` {.python .cell-code}\n76trombones = 'big parade'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[41], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    76trombones = 'big parade'</span>\n<span class=\"ansi-white-fg ansi-bold\">     ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid decimal literal\n</pre>\n```\n:::\n\n:::\n:::\n\n\n`class` is also illegal, but it might not be obvious why.\n\n::: {#3953fee8 .cell execution_count=42}\n``` {.python .cell-code}\nclass = 'Defense Against the Dark Arts'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[42], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    class = 'Defense Against the Dark Arts'</span>\n<span class=\"ansi-white-fg ansi-bold\">          ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {.callout-tip}\nYour editor will often highlight keywords in a different color so you can recognize them.\n:::\n\n## The `import` statement\n\nSome features require **importing**. For example, to use the `math` module:\n\n::: {#c93c2624 .cell execution_count=43}\n``` {.python .cell-code}\nimport math\n```\n:::\n\n\nA **module** is a collection of variables and functions. [Python's math module](https://docs.python.org/3/library/math.html) provides a variable called `pi` that contains the value of the mathematical constant π:\n\n::: {#d3b35d10 .cell execution_count=44}\n``` {.python .cell-code}\nmath.pi\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n3.141592653589793\n```\n:::\n:::\n\n\nUse the **dot** to access module features:\n\n::: {#1574c021 .cell execution_count=45}\n``` {.python .cell-code}\nprint(math.sqrt(25))\nprint(math.pow(5, 2)) # 5 ** 2 behaves the same as math.pow(5, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5.0\n25.0\n```\n:::\n:::\n\n\n## Expressions vs statements\n\nAn **expression** calculates a value, regardless of its complexity:\n\n::: {#4d81aa75 .cell execution_count=46}\n``` {.python .cell-code}\n19 + n + round(math.pi) * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n42\n```\n:::\n:::\n\n\nA **statement** performs an action without producing a value you can use:\n\n::: {#bb9df0ff .cell execution_count=47}\n``` {.python .cell-code}\nn = 17\n```\n:::\n\n\nWe **evaluate** expressions to get their value and **execute** statements to perform actions.\n\n## The `print()` function\n\nWhen you type an expression in many Python environments, it displays the result. But if you have multiple expressions in a single cell (or script), only the last one appears. Use `print()` to display more than one item:\n\n::: {#ee502ff0 .cell execution_count=48}\n``` {.python .cell-code}\nprint(n + 2)\nprint(n + 3)\nprint(\"The value of pi is approximately\", math.pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n19\n20\nThe value of pi is approximately 3.141592653589793\n```\n:::\n:::\n\n\n::: {.callout-note}\n`print()` separates arguments with a space by default.\n:::\n\n## Function Arguments\n\nThe expressions inside a function call’s parentheses are **arguments**. Different functions accept different numbers of arguments:\n\n- `int()` can take one required argument and an optional base:\n\n::: {#4daf3b1d .cell execution_count=49}\n``` {.python .cell-code}\nint(\"101\", 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n5\n```\n:::\n:::\n\n\n- `math.pow()` takes two arguments:\n\n::: {#cc2e439e .cell execution_count=50}\n``` {.python .cell-code}\nmath.pow(5, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n25.0\n```\n:::\n:::\n\n\n- `round()` can take an optional second argument (decimals to round):\n\n::: {#02565afd .cell execution_count=51}\n``` {.python .cell-code}\nround(math.pi, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n3.142\n```\n:::\n:::\n\n\n- `print()` accepts any number of arguments:\n\n::: {#9566097f .cell execution_count=52}\n``` {.python .cell-code}\nprint(\"Any\", \"number\", \"of\", \"arguments\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAny number of arguments\n```\n:::\n:::\n\n\nIf you supply too many or too few arguments, or if the arguments are the wrong type, Python raises a TypeError:\n\n::: {#d68ba2dd .cell execution_count=53}\n``` {.python .cell-code}\nfloat(\"123\", 2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[53], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">float</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">123</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: float expected at most 1 argument, got 2</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#607bec66 .cell execution_count=54}\n``` {.python .cell-code}\nmath.pow(2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[54], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">math</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">pow</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: pow expected 2 arguments, got 1</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#aed3acec .cell execution_count=55}\n``` {.python .cell-code}\nmath.sqrt(\"25\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[55], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">math</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">sqrt</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">25</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: must be real number, not str</pre>\n```\n:::\n\n:::\n:::\n\n\n## Comments\n\nAs code grows, **comments** clarify your reasoning or record important details. Python ignores text after a `#`:\n\n::: {#af6f2b2c .cell execution_count=56}\n``` {.python .cell-code}\n# Variables\nforce = 500 # Force in Newtons (N)\narea = 0.01 # Cross-sectional area in square meters (m²)\n\n# Formula\nstress = force / area\n\n# Output\nprint(\"Stress:\", stress, \"in (Pa)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStress: 50000.0 in (Pa)\n```\n:::\n:::\n\n\n**Good comments** explain why you wrote the code in a certain way (especially if it’s not obvious):\n\n::: {#ca36f39e .cell execution_count=57}\n``` {.python .cell-code}\n# Use SI units for consistency throughout the program\narea = 0.01\n```\n:::\n\n\nBad comments restate the obvious:\n\n::: {#533f2086 .cell execution_count=58}\n``` {.python .cell-code}\narea = 0.01  # set area to 0.01\n```\n:::\n\n\nWell-chosen variable names can reduce the need for comments, but avoid names so long that they make expressions unreadable.\n\n## Debugging\n\nWe call mistakes in code bugs, and the process of finding and fixing them debugging. You might feel frustrated when things break, but remember it's normal and part of learning.\n\nThink of the computer as precise but inflexible. You must provide exact instructions because it doesn't infer or guess what you mean.\n\n### Common Errors\n\n1. **Syntax erros**: The code violates Python’s structure rules. Python refuses to run the code and points out where it got stuck:\n\n::: {#1274ff3e .cell execution_count=59}\n``` {.python .cell-code}\nmillion! = 1000000\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">  Cell </span><span class=\"ansi-green-fg ansi-bold\">In[59], line 1</span>\n<span class=\"ansi-yellow-fg ansi-bold\">    million! = 1000000</span>\n<span class=\"ansi-white-fg ansi-bold\">           ^</span>\n<span class=\"ansi-red-fg ansi-bold\">SyntaxError</span><span class=\"ansi-red-fg ansi-bold\">:</span> invalid syntax\n</pre>\n```\n:::\n\n:::\n:::\n\n\n2. **Runtime errors**: The code starts running but fails during execution, like dividing a string by an integer:\n\n::: {#d2b3f717 .cell execution_count=60}\n``` {.python .cell-code}\n\"126\" / 3\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[60], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">126</span><span style=\"color:rgb(175,0,0)\" class=\"ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">/</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">3</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: unsupported operand type(s) for /: 'str' and 'int'</pre>\n```\n:::\n\n:::\n:::\n\n\n3. **Semantic errors**: The code runs but does something unintended. For example, mixing up units might produce the wrong numeric result without an obvious error:\n\n::: {#c786e689 .cell execution_count=61}\n``` {.python .cell-code}\n# This uses area in cm² instead of m²\nforce = 500       # Newtons\narea = 10         # cm² (wrong units)\nstress = force / area\nprint(stress)     # No error, but incorrect value => semantic error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50.0\n```\n:::\n:::\n\n\n## Exercises\n\n### Rounding Behavior\n\nExperiment with `round()` when a number ends in `0.5`. It sometimes rounds up and sometimes down. Figure out the pattern:\n\n::: {#6d4f9098 .cell execution_count=62}\n``` {.python .cell-code}\nround(42.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n42\n```\n:::\n:::\n\n\n::: {#1a1051fb .cell execution_count=63}\n``` {.python .cell-code}\nround(43.5)\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n44\n```\n:::\n:::\n\n\n### Deliberate Mistakes\n\na. What happens if you use a `+` sign before a number (`+2`) or repeat it (`2++2`)? What about `2--2`?\nb. What if you write two values without an operator (`4 2`)?\nc. What if you call `round(42.5)` but remove one or both parentheses?\n\n### Type Checking\n\nGuess each expression's type and then use `type()` to check:\n\n- `765`\n- `2.718`\n- `\"2 pi\"`\n- `abs(-7)`\n- `abs`\n- `int`\n- `type`\n\n### More Arithmetic\n\n- How many seconds are there in 42 minutes 42 seconds?\n- How many miles are there in 10 kilometers (`1.61 kilometers/mile`)? \n- If you run a 10 kilometer race in 42 minutes 42 seconds, what is your average pace in seconds per mile?\n\n### Intentional Errors\n\n- We've seen `n = 17` is legal, what about `17 = n`?\n- What about `x = y = 1`?\n- In some languages every statement ends with a semi-colon (`;`). What happens if you put a semi-colon at the end of a Python statement?\n- What if you put a period at the end of a statement?\n- What happens if you spell the name of a module wrong and try to `import maath`?\n\n### Volume of a Sphere\n\nThe formula for the volume of a sphere with radius $r$ is $\\frac{4}{3} \\pi r^3$. Compute it for $r = 5$.\n\n- Start with a variable names `radius` (in centimeters)\n- Compute `volume` (in cubic centimeters)\n- Print the result and include comments\n\n### Trigonometry\n\nAccording to a trig identity, $(\\cos x)^2 + (\\sin x)^2 = 1$. Test this for `x = 42`.\n\n- Create a variable named `x` to `42`\n- Use `math.cos()` and `math.sin()` to compute\n\n::: {.callout-note}\nIt might not be exactly 1 because of floating-point imprecision. \n:::\n\n### Exploring $e$\n\nThe `math` module defines `e`. Compute $e^2$ in three ways:\n\n- Use `math.e` and the exponentiation operator.\n- Use `math.pow` to raise `math.e` to the power `2`.\n- Use `math.exp`, which takes as an argument a value, $x$, and computes $e^x$.\n\nCompare the results and see which appears most accurate.\n\n",
    "supporting": [
      "02-intro-to-python_files"
    ],
    "filters": [],
    "includes": {}
  }
}