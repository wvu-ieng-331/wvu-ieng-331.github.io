{
  "hash": "bcafc3c9f7ca509a25cf8d9ce8d601cc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"03 | Functions and Flow Control\"\nsubtitle: \"Learn about the basics of Python.\"\nformat: html\norder: 3\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Overview\n\nWe've used several functions provided by Python. In this module, we will learn how to create our own functions and run them. We will also see how one function can call another. We will also see a new statement, the `for` loop, which is used to repeat a computation.\n\n## Defining new functions\n\nA **function definition** specifies the name of a new function and the sequence of statements that run when the function is called:\n\n::: {#8f0b741e .cell execution_count=1}\n``` {.python .cell-code}\ndef print_lyrics():\n    print(\"Almost Heaven, West Virginia\")\n    print(\"Blue Ridge Mountains, Shenandoah River\")\n```\n:::\n\n\n`def` is a keyword that indicates that this is a function definition. The name of *this* function is `print_lyrics`. Anything that is a valid variable name is also good for a function name.\n\nThe empty parentheses after the name indicate that this function doesn't take any arguments.\n\nThe first line of the function definition is called the **header**, the rest is called the **body**. The header must end with a colon and the body must be indented. By convention, indentation is always four spaces. The body of *this* function is the two `print()` statements. In general, the body of a function can contain any number of statements of any kind.\n\nDefining a function creates a **function object**, which we can display like this:\n\n::: {#1d0593bd .cell execution_count=2}\n``` {.python .cell-code}\nprint_lyrics\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n<function __main__.print_lyrics()>\n```\n:::\n:::\n\n\nThe output shows that `print_lyrics` takes no arguments. `__main__` is the name of the module that contains `print_lyrics`.\n\nWe can call this function the same way as any other Python function:\n\n::: {#4e39fa2f .cell execution_count=3}\n``` {.python .cell-code}\nprint_lyrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlmost Heaven, West Virginia\nBlue Ridge Mountains, Shenandoah River\n```\n:::\n:::\n\n\n## Parameters\n\nSome of the functions we've seen require arguments: `abs()` takes a number an argument. Some functions take more than one argument: `math.pow()` takes two, the base and the exponent.\n\nWe can make our own:\n\n::: {#5ee33602 .cell execution_count=4}\n``` {.python .cell-code}\ndef print_twice(string):\n    print(string)\n    print(string)\n```\n:::\n\n\nThe variable name in parentheses is called a **parameter**. When the function is called, the value of the argument is assigned to the parameter. For example, we can call `print_twice()` like this:\n\n::: {#0d7af86e .cell execution_count=5}\n``` {.python .cell-code}\nprint_twice(\"Hail WV!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHail WV!\nHail WV!\n```\n:::\n:::\n\n\nRunning this function has the same effect as assigning the argument to the parameter and then executing the body of the function, like this:\n\n::: {#60c0aae6 .cell execution_count=6}\n``` {.python .cell-code}\nstring = \"Hail WV!\"\nprint(string)\nprint(string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHail WV!\nHail WV!\n```\n:::\n:::\n\n\nYou can also use a variable as an argument:\n\n::: {#51811a20 .cell execution_count=7}\n``` {.python .cell-code}\nline = \"Hail WV!\"\nprint_twice(line)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHail WV!\nHail WV!\n```\n:::\n:::\n\n\n## Calling functions\n\nOnce you have defined a function, you can use it inside another function. To demonstrate, we'll write functions that print the improved lyrics to \"Sweet Caroline\":\n\n```\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t!\n```\n\nWe'll start with the following:\n\n::: {#2f4408a0 .cell execution_count=8}\n``` {.python .cell-code}\ndef repeat(word, n):\n    print(word * n)\n```\n:::\n\n\nWe can use this function to remind p*tt fans to:\n\n::: {#f6eabded .cell execution_count=9}\n``` {.python .cell-code}\npitt = \"Eat Sh*t! \"\nrepeat(pitt, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEat Sh*t! Eat Sh*t! Eat Sh*t! \n```\n:::\n:::\n\n\nThis is good for the last line, but let's create another function for the first three lines of the chorus:\n\n::: {#fa0cfa64 .cell execution_count=10}\n``` {.python .cell-code}\ndef chorus_start():\n    print(\"Sweet Caroline\")\n    print(\"Eat Sh*t p*tt!\")\n    print(\"Good times never seemed so good\")\n```\n:::\n\n\nWe can bring it all together with one function that prints the whole verse:\n\n::: {#62487a3e .cell execution_count=11}\n``` {.python .cell-code}\ndef print_chorus():\n    chorus_start()\n    repeat(pitt, 3)\n```\n:::\n\n\n::: {#332e9c30 .cell execution_count=12}\n``` {.python .cell-code}\nprint_chorus()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! \n```\n:::\n:::\n\n\nWhen we run `print_chorus()`, it calls `chorus_start()` then `repeat()`, which then calls `print()`. That's a lot of functions.\n\nWe could have done the same with fewer functions, but the point of this example is to show how functions can work together.\n\nWhat if we wanted to control how many times `repeat()` *repeats* when we use `print_chorus()`? We can simply add an argument to `print_chorus()` that will be used in `repeat()`:\n\n::: {#86ed9e95 .cell execution_count=13}\n``` {.python .cell-code}\ndef print_chorus(n):\n    chorus_start()\n    repeat(pitt, n)\n```\n:::\n\n\nNow, we can call `print_chorus()` with a value that will be passed along to `repeat()`:\n\n::: {#b91fa48b .cell execution_count=14}\n``` {.python .cell-code}\nprint_chorus(1867)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! \n```\n:::\n:::\n\n\n## Repetition\n\nIf we want to display more than one verse, we can use a `for` statement. Here's a simple example:\n\n::: {#c53258f6 .cell execution_count=15}\n``` {.python .cell-code}\nfor i in range(2):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n```\n:::\n:::\n\n\nThe first line is a header that ends with a colon. The second line is the body, which has to be indented.\n\nThe header starts with the keyword `for`, a new variable named `i`, and another keyword, `in`. It uses `range()` to create a sequence of two values, which are `0` and '1'. \n\nIn Python, when we start counting (also known as **indexing**), we start with `0`, not `1`:\n\nWhen the `for` statement runs, it assigns the first value from `range()` to `i`, and then runs the `print()` in the body, which displays `0`.\n\nWhen it gets to the end of the body, it loops back around to the header, which is why this statement is called a **loop**. The second time through the loop, it assigns the next value from `range()` to `i`, and displays it. Then, because that's the last value from `range()`, the loop ends.\n\nHere's how we can use a `for` loop to print two verses of the song:\n\n::: {#3e15ae74 .cell execution_count=16}\n``` {.python .cell-code}\nfor i in range(2):\n    print(\"Chorus\", i)\n    print_chorus(3),\n    print() # this is to add a blank line between the choruses\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChorus 0\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! \n\nChorus 1\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! \n\n```\n:::\n:::\n\n\nYou can put a `for` loop inside a function. For example, `print_m_chorus()` which prints the chorus `m` amount of times:\n\n::: {#27f66699 .cell execution_count=17}\n``` {.python .cell-code}\ndef print_m_chorus(m):\n    for i in range(m):\n        print_chorus(3)\n        print()\n\nprint_m_chorus(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! \n\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! \n\n```\n:::\n:::\n\n\nIn this example, we don't use `i` in the body of the loop, but there has to be a variable in the header anyway.\n\nHere is a more advanced version of `print_m_chorus()` that also lets us remind p*tt how much to eat:\n\n::: {#05215792 .cell execution_count=18}\n``` {.python .cell-code}\ndef print_m_chorus_n_times(m, n):\n    for i in range(m):\n        print_chorus(n)\n        print()\n\nprint_m_chorus_n_times(4, 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! \n\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! \n\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! \n\nSweet Caroline\nEat Sh*t p*tt!\nGood times never seemed so good\nEat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! Eat Sh*t! \n\n```\n:::\n:::\n\n\n## Variables and parameters are local\n\nWhen you create a variable inside a function, it is **local**, meaning that it only exists inside the function. For example, following function takes two arguments, concatenates them, and prints the result twice:\n\n::: {#323705b0 .cell execution_count=19}\n``` {.python .cell-code}\ndef cat_twice(part_1, part_2):\n    cat = part_1 + part_2\n    print_twice(cat)\n```\n:::\n\n\n::: {#7b545085 .cell execution_count=20}\n``` {.python .cell-code}\nline_1 = \"Country roads, \"\nline_2 = \"take me home.\"\ncat_twice(line_1, line_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCountry roads, take me home.\nCountry roads, take me home.\n```\n:::\n:::\n\n\nWhen `cat_twice()` runs, it creates a local variable named `cat`, which is destroyed when the function ends. If we try to display it, we get a `NameError`:\n\n::: {#3e087cd6 .cell execution_count=21}\n``` {.python .cell-code}\nprint(cat)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[21], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">cat</span>)\n\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>: name 'cat' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nOutside of the function, `cat` is not defined.\n\nParameters are also local. For example, outside `cat_twice()`, there is no such thing as `part_1` or `part_2`.\n\n## Stack diagrams\n\nTo keep track of which variables can be used where, it is sometimes useful to draw a **stack diagram**. These show the value of each variable, but also which function the variables belong to.\n\nEach function is represented by a **frame**. A frame is a box with the name of a function on the outside and the parameters and local variables of the function on the inside.\n\nHere's the stack diagram for the previous example:\n\n```\n__main__: line_1 -> \"Country roads, \"\n          line_2 -> \"take me home.\"\n```\n\n```\ncat_twice: part_1 -> \"Country roads, \"\n           part_2 -> \"take me home.\"\n           cat -> \"Country roads, take me home.\"\n```\n\n```\nprint_twice: string -> \"Country roads, take me home.\"\n```\n\n```\nprint: ? -> \"Country roads, take me home.\"\n```\n\nThe frames are arranged in a *stack* that indicates which function called which, and so on. Reading from the bottom, `print()` was called by `print_twice()`, which was called by `cat_twice()`, which was called by `__main__` - which is a special name for the topmost frame. When you create a variable outside of any function, it belongs to `__main__`.\n\nIn the frame for `print()`, the question mark, `?`, indicates that we don't know the name of the parameter.\n\n## Tracebacks\n\nWhen a runtime error occurs inside a function, Python displays the name of the function that was running, the name of the function that called it, and so on, up the \"stack\". This example defines a version of `print_twice()` that contains an error - it tries to print `cat`, which is a local variable in another function.\n\n::: {#3e581552 .cell execution_count=22}\n``` {.python .cell-code}\ndef print_twice(string):\n    print(cat)              # NameError\n    print(cat)\n```\n:::\n\n\n::: {#4e063565 .cell execution_count=23}\n``` {.python .cell-code}\ncat_twice(line_1, line_2)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[23], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">cat_twice</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">line_1</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">line_2</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg ansi-bold\">In[19], line 3</span>, in <span class=\"ansi-cyan-fg\">cat_twice</span><span class=\"ansi-blue-fg ansi-bold\">(part_1, part_2)</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">cat_twice</span>(part_1, part_2):\n<span class=\"ansi-green-fg\">      2</span>     cat <span style=\"color:rgb(98,98,98)\">=</span> part_1 <span style=\"color:rgb(98,98,98)\">+</span> part_2\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 3</span>     <span class=\"ansi-yellow-bg\">print_twice</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">cat</span><span class=\"ansi-yellow-bg\">)</span>\n\nCell <span class=\"ansi-green-fg ansi-bold\">In[22], line 2</span>, in <span class=\"ansi-cyan-fg\">print_twice</span><span class=\"ansi-blue-fg ansi-bold\">(string)</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span style=\"color:rgb(0,0,255)\">print_twice</span>(string):\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 2</span>     <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">cat</span>)              <span style=\"font-style:italic;color:rgb(95,135,135)\"># NameError</span>\n<span class=\"ansi-green-fg\">      3</span>     <span style=\"color:rgb(0,135,0)\">print</span>(cat)\n\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>: name 'cat' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nThe error message includes a **traceback**, which shows the function that was running when the error occurred, the function that called it, and so on. In this example, it shows that `cat_twice()` called `print_twice()`, and the error occurred in a `print_twice().\n\nThe order of the functions in the traceback is the same as the order of the frames in the stack diagram. The function that was running is at the bottom.\n\n## Why functions?\n\nIt may not be clear yet why it is worth the trouble to divide a program into functions. There are several reasons:\n\n- Creating a new function gives you an opportunity to name a group of statements, which makes your program easier to read and debug.\n- Functions can make a program smaller by eliminating repetitive code. Later, if you make a change, you only have to make it in one place.\n- Dividing a long program into functions allows you to debug the parts one at a time and then assemble them into a working whole.\n- Well-designed functions are often useful for many programs. Once you write and debug one, you can reuse it.\n\n## Debugging\n\nDebugging can be frustrating, but it is also challenging, interesting, and sometimes even fun. And it is one of the most important skills you can learn.\n\nIn some ways debugging is like detective work. You are given clues and you have to infer the events that led to the results you see.\n\nDebugging is also like experimental science. Once you have an idea about what is going wrong, you modify your program and try again. If your hypothesis was correct, you can predict the result of the modification, and you take a step closer to a working program. If your hypothesis was wrong, you have to come up with a new one.\n\nFor some people, programming and debugging are the same thing; that is, programming is the process of gradually debugging a program until it does what you want. The idea is that you should start with a working program and make small modifications, debugging them as you go.\n\nIf you find yourself spending a lot of time debugging, that is often a sign that you are writing too much code before you start tests. If you take smaller steps, you might find that you can move faster.\n\n## Exercises\n\n### Exercise\n\nWrite a function named `print_right()` that takes a string named `text` as a parameter and prints the string with enough leading spaces that the last letter of the string is in the 40th column of the display.\n\nHint: Use `len()`, `+`, and `*`.\n\nHere's an example output:\n\n```{.python}\nprint_right(\"Monty\")\nprint_right(\"Python's\")\nprint_right(\"Flying Circus\")\n```\n\n```\n                                   Monty\n                                Python's\n                           Flying Circus\n```\n\n### Exercise\n\nWrite a function called `triangle` that takes a string and an integer and draws a pyramid with the given height, made up using copies of the string. Here's an example of a triangle with `5` levels, using the string `L`:\n\n```{.python}\ntriangle(\"L\", 5)\n```\n\n```\nL\nLL\nLLL\nLLLL\nLLLLL\n```\n\n### Exercise\n\nWrite a function called `rectangle` that takes a string and two integers and draws a rectangle with the given width and height, made up using copies of the string. Here’s an example of a rectangle with width `5` and height `4`, made up of the string '[]':\n\n```{.python}\nrectangle(\"[]\", 5, 4)\n```\n\n```\n[][][][][]\n[][][][][]\n[][][][][]\n[][][][][]\n`````\n\n",
    "supporting": [
      "03-flow-control-and-functions_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}